name: Build images

on: [push]

jobs:
  define-python-versions:
    runs-on: ubuntu-latest

    outputs:
      versions: ${{ steps.python_versions.outputs.versions }}

    steps:
      - name: Define Python versions
        id: python_versions
        run: |
          echo 'versions=["3.8", "3.9", "3.10", "3.11", "3.12"]' >> "$GITHUB_OUTPUT"

  build_images:
    name: Build images
    runs-on: ubuntu-latest
    needs: define-python-versions
    strategy:
      matrix:
        python-version:  ${{ fromJSON(needs.define-python-versions.outputs.versions) }}
        union-version: ["0.1.75"]
    steps:
      - name: Check version
        run: |
          echo ${{matrix.python-version }}
      # - uses: actions/checkout@v4
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
  #     - name: Create destination for image tarballs
  #       run: |
  #         mkdir -p images
  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         file: Dockerfile
  #         platforms: linux/amd64
  #         tags: union:py${{ matrix.python-version }}-${{ matrix.union-version }}
  #         outputs: type=docker,dest=images/py${{ matrix.python-version }}-${{ matrix.union-version }}.tar
  #         build-args: |
  #           PYTHON_VERSION=${{ matrix.python-version }}
  #           UNION_VERSION=${{ matrix.union-version }}

  #     - name: Upload single binary image
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: py${{ matrix.python-version }}-${{ matrix.union-version }}
  #         path: images

  # upload_images:
  #   name: Upload images
  #   runs-on: ubuntu-latest
  #   needs: [build_images]
  #   permissions:
  #     packages: write
  #     contents: read
  #   strategy:
  #     matrix:
  #       python-version: ["3.8", "3.12"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/download-artifact@v4
  #       with:
  #         path: images
  #         pattern: py${{ matrix.python-version }}*
  #         merge-multiple: true

  #     - name: Check images
  #       run: |
  #         ls images

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Load docker images and push
  #       run: |
  #         for image in images/*.tar; do
  #           docker image load -i "$image"
  #           TAG=$(basename "$image" .tar)
  #           docker image tag union:$TAG ghcr.io/${{ github.repository_owner }}/union:$TAG
  #           docker image push ghcr.io/${{ github.repository_owner }}/union:$TAG
  #         done
